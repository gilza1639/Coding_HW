'''
Реализовать класс «Дата», функция-конструктор которого должна принимать дату в виде строки формата «день-месяц-год».
В рамках класса реализовать два метода. Первый, с декоратором @classmethod, должен извлекать число, месяц, год и
преобразовывать их тип к типу «Число». Второй, с декоратором @staticmethod, должен проводить валидацию числа, месяца
и года (например, месяц — от 1 до 12). Проверить работу полученной структуры на реальных данных.
'''

from num2words import num2words

'''
Забил на условия задания и встроил валидатор, если это так можно назвать, в основной метод
не вижу смысла также использовать оба метода. self нам конечно не особо нужен, поэтому любой из методов исключит его, 
в данном случае предпочтительно для меня @staticmethod

@classmethod тоже не особо нужен, но если его использование оюязательно, считайте что я реализовал его в 
строке 285 как 
fulldate_list = cls.date.lower().split('-')

В данном случае экономие трудоемкости кода никак не изменилась, код тоже. Если нужно было бы раз в 10 строк
обращаться к классу изнутри, исопльзовал бы @classmethod

PS - код полностью рукописный, задание заняло часов 4-8. Плюс я на 100% уверен, что нужно было сделать извелечение 
чисел из строки 29-02-2020, но кажется это слишком легким. Как финальное дз - слишком леко
'''

class Date:
    def __init__(self, date):
        Date.date = date

    @staticmethod
    def normal_date():
        def normal_date_calcul(list_of_data):
            dict_of_big_nums = {
                'триллион': 1000000000000,
                '1000000000000': 1000000000000,
                'триллионный': 1000000000000,
                'триллионные': 1000000000000,
                'триллионов': 1000000000000,
                'триллиона': 1000000000000,
                'миллиард': 1000000000,
                '1000000000': 1000000000,
                'миллиардный': 1000000000,
                'миллиардные': 1000000000,
                'миллиардов': 1000000000,
                'миллиарда': 1000000000,
                'миллион': 1000000,
                '1000000': 1000000,
                'миллиона': 1000000,
                'миллионный': 1000000,
                'миллионные': 1000000,
                'миллионов': 1000000,
                'тысяча': 1000,
                'тысячи': 1000,
                '1000': 1000,
                'тысячный': 1000,
                'тысячные': 1000,
                'тысяч': 1000,
            }
            dict_of_s_num = {
                # от 1 до 9
                'один': 1,
                'одна': 1,
                'первый': 1,
                'первое': 1,
                'первого': 1,
                'два': 2,
                'две': 2,
                'второй': 2,
                'второе': 2,
                'второго': 2,
                'три': 3,
                'третий': 3,
                'третье': 3,
                'третьего': 3,
                'четыре': 4,
                'четвертый': 4,
                'четвертое': 4,
                'четвертого': 4,
                'пять': 5,
                'пятый': 5,
                'пятое': 5,
                'пятого': 5,
                'шесть': 6,
                'шестой': 6,
                'шестое': 6,
                'шестого': 6,
                'семь': 7,
                'седьмой': 7,
                'седьмое': 7,
                'седьмого': 7,
                'восемь': 8,
                'восьмой': 8,
                'восьмое': 8,
                'восьмого': 8,
                'девять': 9,
                'девятый': 9,
                'девятое': 9,
                'девятого': 9,
                # от 11 до 19
                'одиннадцать': 11,
                'одиннадцатый': 11,
                'одиннадцатое': 11,
                'двенадцать': 12,
                'двенадцатый': 12,
                'двенадцатое': 12,
                'тринадцать': 13,
                'тринадцатый': 13,
                'тринадцатое': 13,
                'четырнадцать': 14,
                'четырнадцатый': 14,
                'четырнадцатое': 14,
                'пятнадцать': 15,
                'пятнадцатый': 15,
                'пятнадцатое': 15,
                'шестнадцать': 16,
                'шестнадцатый': 16,
                'шестнадцатое': 16,
                'семнадцать': 17,
                'семнадцатый': 17,
                'семнадцатое': 17,
                'восемнадцать': 18,
                'восемнадцатый': 18,
                'восемнадцатое': 18,
                'девятнадцать': 19,
                'девятнадцатый': 19,
                'девятнадцатое': 19,
                # 10:90:10
                'десять': 10,
                'десятый': 10,
                'десятое': 10,
                'десятого': 10,
                'двадцать': 20,
                'двадцатый': 20,
                'двадцатое': 20,
                'двадцатого': 20,
                'тридцать': 30,
                'тридцатый': 30,
                'тридцатое': 30,
                'тридцатого': 30,
                'сорок': 40,
                'сороковой': 40,
                'сороковое': 40,
                'сорокового': 40,
                'пятьдесят': 50,
                'пятидесятый': 50,
                'пятидесятое': 50,
                'пятидесятого': 50,
                'шестьдесят': 60,
                'шестидесятое': 60,
                'шестидесятый': 60,
                'шестидесятого': 60,
                'семьдесят': 70,
                'семидесятое': 70,
                'семидесятый': 70,
                'семидесятого': 70,
                'восемьдесят': 80,
                'восьмидесятое': 80,
                'восьмидесятый': 80,
                'восьмидесятого': 80,
                'девяносто': 90,
                'девяностое': 90,
                'девяностый': 90,
                'девяностого': 90,
                # 100:900:100
                'сто': 100,
                'сотый': 100,
                'сотые': 100,
                'сотого': 100,
                'двести': 200,
                'двухсотый': 200,
                'двухсотые': 200,
                'двухсотого': 200,
                'триста': 300,
                'трехсотый': 300,
                'трехсотые': 300,
                'трехсотого': 300,
                'четыреста': 400,
                'четырехсотый': 400,
                'четырехсотые': 400,
                'четырехсотого': 400,
                'пятьсот': 500,
                'пятисотый': 500,
                'пятисотые': 500,
                'пятисотого': 500,
                'шестьсот': 600,
                'шестисотый': 600,
                'шестисотые': 600,
                'шестисотого': 600,
                'семьсот': 700,
                'семисотый': 700,
                'семисотые': 700,
                'семисотого': 700,
                'восемьсот': 800,
                'восьмисотый': 800,
                'восьмисотые': 800,
                'восьмисотого': 800,
                'девятьсот': 900,
                'девятисотый': 900,
                'девятисотые': 900,
                'девятисотого': 900,
            }
            list_of_big_num = []
            for id, number in enumerate(list_of_data):
                if number in dict_of_big_nums:
                    list_of_big_num.append(id)
                    list_of_data.insert(id, dict_of_big_nums[number])
                    list_of_data.pop(id + 1)
                elif number in dict_of_s_num:
                    list_of_data.insert(id, dict_of_s_num[number])
                    list_of_data.pop(id + 1)
                else:
                    try:
                        list_of_data.insert(id, int(number))
                        list_of_data.pop(id + 1)
                    except:
                        return ('Неожиданный Error')
            outlist = []
            for id, el in enumerate(list_of_big_num):
                if id == 0 and el != 0 and len(list_of_big_num) == 1:
                    outlist.append((sum(list_of_data[0:el])) * list_of_data[el])
                    outlist.append(sum(list_of_data[(el + 1):]))
                elif id == 0 and el != 0:
                    outlist.append((sum(list_of_data[0:el])) * list_of_data[el])

                elif (id - 1) > len(list_of_big_num):
                    outlist.append((sum(list_of_data[(list_of_big_num[id - 1] + 1):el])) * list_of_data[el])
                else:
                    outlist.append((sum(list_of_data[(list_of_big_num[id - 1] + 1):el])) * list_of_data[el])
                    outlist.append(sum(list_of_data[(el + 1):]))
            if len(list_of_big_num) == 0:
                return sum(list_of_data)
            return sum(outlist)

        def month_counter(month_input):
            dict_of_month = {
                '1': 1,
                '01': 1,
                'январь': 1,
                'января': 1,
                '2': 2,
                '02': 2,
                'февраль': 2,
                'февраля': 2,
                '3': 3,
                '03': 3,
                'март': 3,
                'марта': 3,
                '4': 4,
                '04': 4,
                'апрель': 4,
                'апреля': 4,
                '5': 5,
                '05': 5,
                'май': 5,
                'мая': 5,
                '6': 6,
                '06': 6,
                'июнь': 6,
                'июня': 6,
                '8': 8,
                '08': 8,
                'август': 8,
                'августа': 8,
                '9': 9,
                '09': 9,
                'сентябрь': 9,
                'сентября': 9,
                '10': 10,
                'октябрь': 10,
                'октября': 10,
                '11': 11,
                'ноябрь': 11,
                'ноября': 11,
                '12': 12,
                'декабрь': 12,
                'декабря': 12,
            }
            if month_input in dict_of_month:
                return dict_of_month[month_input]
            else:
                return 'Error'

        longs_month = [31, [28, 29], 31, 30, 31, 30, 31, 31, 31, 31, 30, 31]
        fulldate_list = Date.date.lower().split('-')
        # ну или с cls classmethod
        # fulldate_list = cls.date.lower().split('-')
        day_list = fulldate_list[0].split()
        month_list = fulldate_list[1]
        year_list = fulldate_list[2].split()
        answer_output = []
        answer_output.append(normal_date_calcul(day_list))
        answer_output.append(month_counter(month_list))
        answer_output.append(normal_date_calcul(year_list))
        if answer_output[1] == 2:
            if answer_output[2] % 4 == 0:
                if answer_output[0] <= longs_month[1][1]:
                    return f'{answer_output[0]:02}.{answer_output[1]:02}.{answer_output[2]}'
                else:
                    return f'Error: дни {answer_output[0]} превышают кол-во дней в месяце {month_list} високосного года'
            else:
                if answer_output[0] <= longs_month[1][0]:
                    return f'{answer_output[0]:02}.{answer_output[1]:02}.{answer_output[2]}'
                else:
                    return f'Error: дни {answer_output[0]} превышают кол-во дней в месяце {month_list} невисокосного года'
        else:
            if answer_output[0] <= longs_month[answer_output[1] - 1]:
                return f'{answer_output[0]:02}.{answer_output[1]:02}.{answer_output[2]}'
            else:
                return f'Error: дни {answer_output[0]} превышают кол-во дней в месяце {month_list}'


'''
Использовал сторонний модуль чтобы переводить число в слово и тестировать
'''
print('test 1')
print(num2words(42, lang='ru'))
print(num2words(123456789, lang='ru'))
print('endtest\n')

# для удобства сделал функцию чтобы преобразовывать числа с месяцев в вид «день-месяц-год»
# но можно и по стандартному ввести самостоятельно ПРИМЕР:
test_1 = Date('тридцать ПеРвОе-января-две тысячИ двести двадцАТЬ первого')
print('test 2')
print(test_1.normal_date())
print('endtest\n')

test_conter = 2


def testing(num, month, year):
    global test_conter
    test_conter += 1
    output = (num2words(num, lang='ru')) + '-' + month + '-' + (num2words(year, lang='ru'))
    test = Date(output)
    print('\ntest', test_conter)
    print(output)
    print(test.normal_date())

print('='*20)
print('test by function testing')
print('='*20)
print()

testing(29, 'февраль', 1975)
testing(29, 'ФЕВРАЛЯ', 2020)
testing(26, 'февраля', 2003)
testing(20, 'мая', 1978)
testing(1, '05', 1234)
testing(1, '5', 1234)
testing(26, 'августа', 6543210)
testing(30, '10', 2011)
testing(11, 'сентября', 2003)


'''
по идее тут должно работать и со сколнениеями типа
тридцать один # тридцать первое # двадцать восемь # дватьцать восьмое
тридцатые # двадцатые
'''
