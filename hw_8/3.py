'''
Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять
список только числами. Класс-исключение должен контролировать типы данных элементов списка.

Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит
работу скрипта, введя, например, команду “stop”. При этом скрипт завершается, сформированный список с числами
выводится на экран.

Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и
вносить его в список, только если введено число. Класс-исключение должен не позволить пользователю ввести текст
(не число) и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.
'''

class OwnError(Exception):
    def __init__(self, txt=''):
        self.txt = txt

    @staticmethod
    def start_input():
        output_list = []
        ending = False
        nums = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
        while ending == False:
            string = input('Введите значения через пробел без лишних знаков или stop для завершения\n   Ввод: ').split()
            print()
            for el in string:
                if el.lower() == 'stop' or el.lower() == 'break' or el.lower() == 'end':
                    print (f'\033[31mПрекращение работы путем ввода {el}\033[0m')
                    ending = True
                    break
                try:
                    for elem in el:
                        if elem not in nums:
                            raise OwnError(f"\033[31mError: {el} не является числом!\033[0m")

                except OwnError as err:
                    print(err)
                else:
                    output_list.append(int(el))
            print(f'\nВаш список\n\033[34m{output_list}\n\033[0mи его текущая сумма\n\033[34m{sum(output_list)}\n\033[0m')


test = OwnError
test.start_input()


