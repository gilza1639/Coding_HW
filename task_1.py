"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы. Сортировка должна быть реализована в
виде функции. Обязательно доработайте алгоритм (сделайте его умнее).

Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение
Обязательно сделайте замеры времени обеих реализаций
и обосновать дала ли оптимизация эффективность

Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию
"""
import random
import timeit


test_list_1 = [random.randint(-100, 100) for el in range(200)]
test_list_2 = [el for el in range(-100, 101)]
random.shuffle(test_list_2)

print(f'test_list_1 - {test_list_1}')
print(f'test_list_2 - {test_list_2}')

def bubble_sort(num_list):
    while True:
        something_changed = False
        for id, el in enumerate(num_list):
            if id!=0:
                if el<num_list[id-1]:
                    num_list[id-1], num_list[id] = num_list[id], num_list[id-1]
                    something_changed = True
        if something_changed == False:
            return num_list


print(f'bubble_sort(test_list_1) - {bubble_sort(test_list_1)}')
print(f'bubble_sort(test_list_2) - {bubble_sort(test_list_2)}')
#print(f'bubble_sort(test_list_1) 100k times -  {timeit.timeit(stmt="bubble_sort" + f"({test_list_1})", setup=f"from __main__ import bubble_sort", number=100000, globals=globals() )}')
#print(f'bubble_sort(test_list_2) 100k times -  {timeit.timeit(stmt="bubble_sort" + f"({test_list_2})", setup=f"from __main__ import bubble_sort", number=100000, globals=globals() )}')

big_list = [el for el in range(10000)]
random.shuffle(big_list)
print(f'\n\n\nbubble_sort(big_list) 10 times -  {timeit.timeit(stmt="bubble_sort" + f"({big_list})", setup=f"from __main__ import bubble_sort", number=10, globals=globals() )}')
'''
test_list_1 - [12, -26, 93, 66, 14, 77, -59, -47, 26, 84, 90, -61, 77, 38, -42, -63, 60, 22, -39, -88, -44, -8, 100, 72, -19, -82, 35, -23, 89, 25, 96, 49, -87, 8, -75, 9, 98, 0, 29, -9, -21, 15, -99, 94, -34, -3, 29, 78, -42, 37, 42, -53, -54, -93, 77, 12, 31, 38, 36, -51, -20, 11, -99, 68, 80, -45, -96, -62, 16, 82, 90, -23, 9, -77, -56, -92, -30, 13, 49, -82, -25, 81, -88, -76, -98, 83, 97, -49, -75, 96, -99, 96, 86, 28, -75, 53, -64, 8, 92, 22, 11, -51, -13, -8, 23, -20, -83, -68, 60, -11, 79, 91, -44, 52, 97, 48, 89, 42, 21, 41, -49, 21, -77, 42, 1, -54, -94, -49, -63, -100, -49, 5, 15, -32, -81, -78, 46, 32, 11, -62, -72, -14, -41, -74, 83, 24, 39, 72, -24, 87, 4, 15, -31, 69, 43, 39, 12, 0, -66, -67, 86, 48, 80, -76, -94, -58, -97, -89, -31, 68, 42, -71, -18, -5, -8, 39, 89, -27, -35, 92, -93, -78, -76, -96, 62, -70, -13, -72, -53, -71, 88, 63, -1, -78, 50, -31, 36, -70, 91, 100]
test_list_2 - [51, 97, -68, -44, 24, 40, 43, -37, 72, -12, -83, -45, 90, 6, 45, -46, -84, 83, -92, -11, 76, 89, -30, -77, -60, 28, 59, 46, 39, 50, 25, 87, -51, 36, -1, -65, 38, 0, 58, -32, -91, -93, -17, -82, -88, -40, -23, -43, 5, 23, -87, 10, 86, 75, 18, -15, -42, -31, 54, 66, -89, 70, 74, -99, -16, -94, -13, -59, -100, -19, -79, -47, -29, -55, 84, -36, -33, 3, -21, 55, -34, 99, 9, -86, -96, -2, 35, -6, -63, 26, 71, -71, -95, -27, 60, -78, -41, -70, 41, -56, 78, -90, 88, -5, 37, -61, 47, -69, -49, -3, 80, -9, 94, 98, -18, 96, -66, 44, -67, 31, -48, -52, 16, 4, -38, 53, -10, 85, 61, -73, 100, 22, 42, 56, 63, -20, 92, 82, 67, 21, 8, -80, -39, 62, 65, 34, -81, 57, -62, 69, 13, -57, -4, 32, 20, -74, -35, -24, 79, -98, 12, 2, -50, 68, -85, 49, 33, 64, 91, 17, 73, 52, -26, -28, -97, 14, 15, -75, -7, 7, 77, -8, 81, 1, -64, 48, 11, -53, 30, -54, 27, -76, -58, 95, -22, -72, -14, 19, -25, 29, 93]
bubble_sort(test_list_1) - [-100, -99, -99, -99, -98, -97, -96, -96, -94, -94, -93, -93, -92, -89, -88, -88, -87, -83, -82, -82, -81, -78, -78, -78, -77, -77, -76, -76, -76, -75, -75, -75, -74, -72, -72, -71, -71, -70, -70, -68, -67, -66, -64, -63, -63, -62, -62, -61, -59, -58, -56, -54, -54, -53, -53, -51, -51, -49, -49, -49, -49, -47, -45, -44, -44, -42, -42, -41, -39, -35, -34, -32, -31, -31, -31, -30, -27, -26, -25, -24, -23, -23, -21, -20, -20, -19, -18, -14, -13, -13, -11, -9, -8, -8, -8, -5, -3, -1, 0, 0, 1, 4, 5, 8, 8, 9, 9, 11, 11, 11, 12, 12, 12, 13, 14, 15, 15, 15, 16, 21, 21, 22, 22, 23, 24, 25, 26, 28, 29, 29, 31, 32, 35, 36, 36, 37, 38, 38, 39, 39, 39, 41, 42, 42, 42, 42, 43, 46, 48, 48, 49, 49, 50, 52, 53, 60, 60, 62, 63, 66, 68, 68, 69, 72, 72, 77, 77, 77, 78, 79, 80, 80, 81, 82, 83, 83, 84, 86, 86, 87, 88, 89, 89, 89, 90, 90, 91, 91, 92, 92, 93, 94, 96, 96, 96, 97, 97, 98, 100, 100]
bubble_sort(test_list_2) - [-100, -99, -98, -97, -96, -95, -94, -93, -92, -91, -90, -89, -88, -87, -86, -85, -84, -83, -82, -81, -80, -79, -78, -77, -76, -75, -74, -73, -72, -71, -70, -69, -68, -67, -66, -65, -64, -63, -62, -61, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, -49, -48, -47, -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
bubble_sort(test_list_1) 100k times -  2.5422806
bubble_sort(test_list_2) 100k times -  2.5700141

bubble_sort(big_list) 10 times -  238.6024704
'''

'''
Идея доработки: если за проход по списку не совершается ни одной сортировки, то завершение

Я не заню почему это идея для доработки, если это самый простой (и скорее всего единственный без применения других сортировок) способ проверить правильность работы


'''



