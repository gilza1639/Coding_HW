"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Попытайтесь написать третью версию, которая будет самой быстрой.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.
"""
import random
import timeit
from collections import Counter

array = [1, 3, 1, 3, 4, 5, 1]


def array_gen(num):
    return [random.randint(0,100) for el in range(num)]

array = array_gen(1000)
print(array)


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'

# плохая попытка, такой же результат
def func_3():
    max_num = max(array, key=array.count)
    count = array.count(max_num)
    return f'Чаще всего встречается число {max_num}, ' \
           f'оно появилось в массиве {count} раз(а)'

def func_4():

    count = Counter(array).most_common(1)
    return f'Чаще всего встречается число {count[0][0]}, ' \
           f'оно появилось в массиве {count[0][1]} раз(а)'

print(func_1())
print(func_2())
print(func_3())
print(func_4())


func_list = 'func_1 func_2 func_3 func_4'.split()
print('\nTIMER\n')
print('сколько времени уходить на 1000 выполнений числа длинной 1000 цифр:')
for func_name in func_list:
    print(f"{func_name} -\t{timeit.timeit(stmt=func_name + '()', setup=f'from __main__ import {func_name}', number=1000)}")

print('\nfunc_4 repeat_test\n')
print('сколько времени уходить на 100.000 выполнений числа длинной 1000 цифр:')
result = timeit.timeit(stmt='func_4' + '()', setup=f'from __main__ import func_4', number=100000)
print(f"func_4 -\t{result}")
print('Если сотнести это время с предыдущим тестом, и показать средние значения на тысячу повторов (то есть этот результат разделить на 100)')
print(f'func_4 -\t{result/100}')

'''
не думаю что это совсем честная победа, тк этот метод нашел пока работал над другим проектом, а после увидел эту задачу здесь
Более чем в 100 раз быстрее - это классно
'''



'''
Консоль:


[17, 96, 89, 67, 90, 6, 9, 63, 99, 26, 69, 78, 53, 56, 39, 79, 20, 77, 81, 42, 92, 92, 81, 66, 77, 36, 21, 95, 57, 48, 30, 62, 50, 84, 73, 84, 26, 50, 44, 99, 27, 32, 37, 14, 93, 77, 71, 79, 76, 51, 24, 14, 9, 0, 30, 86, 20, 41, 95, 29, 72, 98, 76, 82, 78, 19, 99, 35, 0, 60, 72, 42, 69, 35, 88, 20, 12, 35, 15, 33, 12, 79, 60, 64, 80, 32, 46, 58, 77, 2, 48, 47, 79, 99, 60, 15, 5, 42, 38, 32, 92, 81, 41, 32, 71, 100, 95, 31, 56, 89, 79, 91, 67, 18, 25, 38, 53, 39, 2, 99, 96, 21, 73, 4, 10, 42, 0, 22, 4, 27, 62, 24, 0, 55, 38, 16, 6, 84, 22, 76, 64, 81, 30, 9, 17, 59, 51, 72, 87, 57, 58, 57, 76, 43, 42, 87, 28, 52, 78, 1, 78, 23, 73, 46, 18, 39, 6, 1, 52, 76, 40, 6, 10, 53, 29, 88, 60, 88, 36, 81, 6, 74, 17, 79, 93, 74, 16, 73, 82, 97, 49, 13, 49, 2, 5, 76, 1, 47, 90, 36, 23, 39, 61, 72, 36, 58, 48, 15, 7, 44, 35, 48, 65, 18, 7, 91, 41, 9, 30, 21, 34, 49, 69, 50, 28, 37, 40, 83, 87, 44, 73, 6, 83, 48, 28, 50, 21, 85, 1, 58, 47, 99, 94, 3, 7, 25, 66, 91, 61, 19, 47, 42, 86, 23, 75, 55, 25, 60, 78, 39, 5, 7, 53, 36, 58, 72, 33, 53, 74, 89, 74, 22, 33, 76, 88, 72, 89, 50, 4, 84, 77, 14, 17, 88, 12, 62, 63, 77, 98, 28, 25, 24, 8, 76, 13, 87, 84, 19, 68, 48, 82, 59, 58, 90, 46, 74, 39, 48, 17, 39, 3, 26, 1, 5, 6, 33, 12, 58, 70, 8, 93, 50, 46, 99, 63, 46, 67, 28, 26, 35, 78, 46, 6, 10, 65, 67, 40, 87, 70, 42, 89, 3, 28, 56, 51, 83, 97, 5, 36, 60, 58, 9, 13, 61, 42, 81, 47, 82, 35, 90, 53, 33, 53, 3, 18, 100, 74, 81, 57, 97, 63, 19, 33, 22, 14, 17, 72, 28, 19, 18, 64, 44, 78, 22, 22, 11, 40, 58, 12, 6, 17, 100, 33, 47, 30, 35, 32, 70, 97, 22, 34, 22, 57, 26, 55, 7, 42, 37, 66, 83, 64, 47, 45, 10, 60, 51, 59, 58, 78, 91, 16, 87, 78, 94, 71, 63, 93, 81, 3, 45, 21, 83, 24, 74, 99, 19, 76, 89, 18, 84, 32, 41, 38, 15, 56, 9, 23, 87, 42, 71, 86, 36, 2, 18, 54, 62, 76, 0, 98, 78, 44, 53, 85, 30, 60, 38, 38, 11, 99, 11, 52, 97, 59, 92, 18, 32, 40, 86, 46, 45, 91, 6, 84, 73, 28, 17, 84, 99, 68, 26, 85, 7, 10, 92, 75, 14, 20, 37, 48, 59, 91, 92, 7, 35, 79, 65, 36, 76, 14, 11, 12, 13, 86, 79, 84, 79, 46, 47, 17, 84, 35, 95, 92, 26, 9, 25, 98, 13, 36, 74, 37, 96, 60, 15, 83, 6, 19, 86, 26, 41, 62, 96, 1, 93, 65, 22, 32, 78, 34, 5, 66, 17, 39, 8, 55, 98, 5, 98, 24, 41, 67, 31, 5, 35, 19, 97, 77, 55, 61, 70, 39, 21, 91, 90, 15, 53, 38, 45, 75, 92, 27, 41, 79, 76, 84, 54, 54, 96, 98, 83, 45, 13, 88, 76, 79, 37, 26, 41, 51, 59, 22, 87, 91, 40, 99, 93, 76, 21, 9, 35, 0, 66, 5, 100, 15, 69, 88, 16, 44, 43, 66, 42, 74, 88, 27, 78, 78, 59, 23, 65, 45, 51, 92, 17, 12, 80, 30, 58, 51, 94, 93, 44, 11, 20, 74, 38, 61, 38, 62, 52, 27, 82, 60, 64, 26, 11, 53, 45, 95, 91, 94, 87, 100, 59, 75, 100, 75, 32, 67, 89, 15, 91, 33, 28, 48, 8, 75, 99, 65, 22, 72, 43, 95, 81, 20, 8, 32, 5, 6, 94, 75, 11, 37, 38, 20, 96, 39, 5, 86, 85, 91, 93, 15, 1, 22, 21, 70, 18, 82, 89, 68, 23, 15, 68, 83, 39, 44, 24, 33, 94, 84, 46, 36, 46, 33, 98, 39, 61, 79, 29, 17, 8, 59, 22, 88, 66, 15, 30, 59, 81, 16, 5, 34, 2, 28, 34, 58, 33, 86, 70, 85, 14, 45, 95, 35, 93, 3, 11, 57, 54, 50, 74, 72, 64, 70, 31, 80, 89, 33, 36, 29, 33, 53, 46, 83, 42, 68, 63, 74, 56, 88, 61, 27, 74, 86, 83, 31, 97, 91, 49, 18, 23, 95, 24, 48, 12, 78, 76, 2, 60, 61, 69, 78, 76, 93, 33, 9, 23, 97, 45, 71, 69, 61, 45, 89, 85, 47, 82, 44, 33, 37, 53, 62, 25, 61, 64, 98, 94, 93, 78, 75, 57, 88, 68, 24, 88, 95, 38, 98, 13, 58, 11, 3, 16, 23, 42, 71, 26, 8, 33, 30, 75, 56, 34, 24, 76, 7, 21, 83, 40, 32, 50, 92, 88, 18, 89, 87, 45, 62, 45, 22, 8, 69, 48, 84, 94, 21, 0, 10, 79, 17, 86, 92, 77, 85, 44, 18, 40, 15, 24, 75, 1, 7, 14, 9, 95, 28, 87, 19, 53, 45, 31, 62, 89, 54, 19, 98, 32, 47, 66, 61, 11, 97, 0, 1, 89, 56, 36, 74, 92, 7, 54, 44, 57, 91, 27, 58, 65, 73, 46, 63, 76, 52, 52, 17, 87, 12, 39, 20, 18, 65, 90, 42, 49, 71, 48, 90, 42, 37, 93, 77, 37, 46, 79, 70, 68, 16, 64, 43, 17, 14, 48, 10, 52, 29, 14, 23, 41, 96, 100, 85, 70, 99, 63, 57, 94, 59, 76, 98, 86, 17, 23, 87, 2, 27, 57, 58, 83, 86, 77, 66, 76, 56, 59, 66, 93, 20, 17, 70, 33]
Чаще всего встречается число 76, оно появилось в массиве 20 раз(а)
Чаще всего встречается число 76, оно появилось в массиве 20 раз(а)
Чаще всего встречается число 76, оно появилось в массиве 20 раз(а)
Чаще всего встречается число 76, оно появилось в массиве 20 раз(а)

TIMER

сколько времени уходить на 1000 выполнений числа длинной 1000 цифр:
func_1 -	22.054698000000002
func_2 -	22.1525621
func_3 -	21.9971265
func_4 -	0.07196000000000424

func_4 repeat_test

сколько времени уходить на 100.000 выполнений числа длинной 1000 цифр:
func_4 -	7.265689100000003
Если сотнести это время с предыдущим тестом, и показать средние значения на тысячу повторов (то есть этот результат разделить на 100)
func_4 -	0.07265689100000003



'''